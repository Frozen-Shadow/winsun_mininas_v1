#!/bin/bash

echo "Start baking disk image..."

if [ "$#" -ne 2 ]; then
  	echo "Usage: exactly two arguments required."
	echo "exmaple: scripts/bake_disk 64M 768M # 64M for bzImage + initrd.gz, 768M for golden image zip, the rest for rootfs."
  	exit 1
fi

DISK_IMAGE=deb/emmc.img
GOLDEN_IMAGE_ZIPPED=deb/golden_image.gz
DEB_MOUNT=deb/debinst
LO_PARTITION=
SETCTOR_START=
SECTOR_NUM=

# create new partition using fdisk
function create_new_partition {

local SIZE=""
if [ -n "$1" ]; then SIZE="+$1"; fi
echo "
n
p


$SIZE
w
" | fdisk $DISK_IMAGE
}

# extract sector information into SECTOR_START & SECTOR_NUM array
function extract_sector_info {

    echo "extract sector info"
    local TEMP="$(fdisk -l $DISK_IMAGE | grep ^$DISK_IMAGE | awk -F" " '{print $2}' | tr '\n' ' ')"
    IFS=' ' read -ra SECTOR_START <<< $TEMP

    TEMP="$(fdisk -l $DISK_IMAGE | grep ^$DISK_IMAGE | awk -F" " '{print $4}' | tr '\n' ' ')"
    IFS=' ' read -ra SECTOR_NUM <<< $TEMP

    echo -e "\tpartition 1 \tstart: ${SECTOR_START[0]} \tnum: ${SECTOR_NUM[0]}"
    echo -e "\tpartition 2 \tstart: ${SECTOR_START[1]} \tnum: ${SECTOR_NUM[1]}"
    echo -e "\tpartition 3 \tstart: ${SECTOR_START[2]} \tnum: ${SECTOR_NUM[2]}"
    echo ""
}

# update LO_OFFSET and LO_SIZELIMIT for later usage
function loopback_update_info {
   
    local INDEX=$(($LO_PARTITION - 1))
    LO_OFFSET=${SECTOR_START[$INDEX]}
    LO_OFFSET=$((LO_OFFSET*512))
    LO_SIZELIMIT=${SECTOR_NUM[$INDEX]}
    LO_SIZELIMIT=$((LO_SIZELIMIT*512))
    
    echo "select loopback partition $LO_PARTITION"
    echo -e "\toffset: \t$LO_OFFSET"
    echo -e "\tsizelimit: \t$LO_SIZELIMIT"
    echo ""
}

# attach, $1 is partition number (1, 2, 3)
function loopback_attach {

    LO_PARTITION=$1   
    loopback_update_info  
    LOOP_DEV=$(sudo losetup --find --show --offset $LO_OFFSET --sizelimit $LO_SIZELIMIT $DISK_IMAGE )
    echo "loopback attach partition $LO_PARTITION as $LOOP_DEV"
}

# detach currently attached loop device (LOOP_DEV)
function loopback_detach {
    
    sudo losetup --detach $LOOP_DEV
    echo "loopback detach $LOOP_DEV"
}

###############################################################################
#
#   main function
#
###############################################################################

##
##	create disk image file and do partition
##

# remove old disk image file
rm -rf $DISK_IMAGE

# create new disk image file (4G emmc -> 3776M)
dd if=/dev/zero of=$DISK_IMAGE bs=1M count=3776 

create_new_partition $1
create_new_partition $2
create_new_partition

fdisk -l $DISK_IMAGE

extract_sector_info

##
##  bake partition 3 first
##

# attach loopback device
loopback_attach 3

# format partition
sudo mkfs -t ext4 $LOOP_DEV

# mount paritition
mkdir -p $DEB_MOUNT
sudo mount -t ext4 $LOOP_DEV $DEB_MOUNT

# do deb installation
scripts/install_deb

# workaround forcefully kill all processes using chroot root
sudo fuser -km $DEB_MOUNT

# zip partition 3 image
rm -rf $GOLDEN_IMAGE_ZIPPED
touch $GOLDEN_IMAGE_ZIPPED
sudo bash -c "dd if=$LOOP_DEV | gzip -9 > $GOLDEN_IMAGE_ZIPPED"

# umount partition
sudo umount $DEB_MOUNT
loopback_detach

##
## do partition 2
##

# attach partition 2 to loopback device
loopback_attach 2

# format partition
sudo mkfs -t ext4 $LOOP_DEV

# mount
sudo mount -t ext4 $LOOP_DEV $DEB_MOUNT

# cp golden image file
sudo cp $GOLDEN_IMAGE_ZIPPED $DEB_MOUNT

sudo umount $DEB_MOUNT
loopback_detach

##
## do partition 1
##

loopback_attach 1

sudo dd if=workspace/binaries/IntelCE/bzImage of=$LOOP_DEV bs=1K
sudo dd if=workspace/binaries/IntelCE/ramdisk.ext2.initrd.gz of=$LOOP_DEV bs=1K seek=$((4*1024))

loopback_detach

##
## generate cefdk bootloader script
##

echo "TODO: generate script"
echo "TODO: generate script"
echo "TODO: generate script"
echo "TODO: generate script"




