#!/bin/bash

set -e

# -rw-r--r-- 1 ma ma  60338176 Aug 24 00:14 IntelCE-BASE-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma   5617664 Aug 24 00:14 IntelCE-CEFDK_DEV-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma  45783040 Aug 24 00:14 IntelCE-GATEWAY-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma 327315456 Aug 24 00:14 IntelCE-GPL-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma 323629056 Aug 24 00:14 IntelCE-MEDIA-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma  68870144 Aug 24 00:14 IntelCE-XWINDOWS_OPENGL-29.0.12364.325671.iso

highlight () {

    echo -e "\e[32m\e[1m${1}\e[0m"
}

test_file () {

    if [ -f "$1" ]; then
        echo "Error: $1 does not exist"
        exit 1
    fi
}

DISC_DIR=${BARCELONA_ROOT}/disc

test_iso_files () {

    test_file ${DISC_DIR}/IntelCE-BASE-29.0.12364.325671.iso
    test_file ${DISC_DIR}/IntelCE-CEFDK_DEV-29.0.12364.325671.iso
    test_file ${DISC_DIR}/IntelCE-GATEWAY-29.0.12364.325671.iso
    test_file ${DISC_DIR}/IntelCE-GPL-29.0.12364.325671.iso
    test_file ${DISC_DIR}/IntelCE-MEDIA-29.0.12364.325671.iso
    test_file ${DISC_DIR}/IntelCE-XWINDOWS_OPENGL-29.0.12364.325671.iso
}

check_cache_file_md5 () {
    
    # workaround for path in md5
    cd ${WORKSPACE}

    md5sum -c "$1" cache/$1

    if [ ! $? -eq 0]; then
        echo "Error: md5 check failed for $1"
        exit 1
    fi

    cd -
}


#
# This function use expect to install iso image
#
function install_iso {

    highlight "installing $1"

    rm -rf ${TMP_DIR}
    mkdir ${TMP_DIR}

    sudo mount -t iso9660 -o loop disc/$1 ${TMP_DIR}
    
{   /usr/bin/expect << EOD

    spawn ${TMP_DIR}/installer -d .
    set timeout 1
    expect -exact "--MORE--"
    send "q"
    expect -exact "Do you accept this agreement, yes or no? (y/n/h)"
    send "y"
    expect -exact "Do you accept this agreement, yes or no? (y/n/h)"
    send "y"
    set timeout 30
    expect "Successfully completed installation"

EOD
} &> /dev/null

    sudo umount ${TMP_DIR}
    rm -rf ${TMP_DIR}
}

#
# program starts
#

highlight "test BARCELONA_ROOT env var"

#
# test BARCELONA_ROOT env
# 
if [ -z "$BARCELONA_ROOT" ]; then
    echo "Error: BARCELONA_ROOT is not defined"
    exit 1
fi

echo "BARCELONA_ROOT is set to $BARCELONA_ROOT"

#
# define all paths
#
WORKSPACE=${BARCELONA_ROOT}/workspace
SCRIPT_DIR=${BARCELONA_ROOT}/scripts
PATCH_DIR=${BARCELONA_ROOT}/patches
OUTPUT_DIR=${BARCELONA_ROOT}/output
ARTIFACT_DIR=${BARCELONA_ROOT}/artifacts
STAGING_DIR=${BARCELONA_ROOT}/staging
CACHE_DIR=${BARCELONA_ROOT}/cache
TEMPL_DIR=${BARCELONA_ROOT}/template

TMP_DIR=${BARCELONA_ROOT}/tmp



PKGSRC_DIR=${WORKSPACE}/project_build_i686/IntelCE
KERNEL_DIR=${WORKSPACE}/project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39
CEFDK_ROOTDIR=${WORKSPACE}/project_build_i686/IntelCE/root
CEFDK_OUTDIR=${WORKSPACE}/binaries/IntelCE

USBBOOT_DIR=${OUTPUT_DIR}/usb/boot



# test single cache file
#
# $1: file name
# $2: url
#
fetch_file_cache () {

  mkdir -p ${CACHE_DIR}
  if [ ! -e "${CACHE_DIR}/$1" ]; then
    wget -P ${CACHE_DIR} "$2"

    if [ ! $? -eq 0 ]; then 
        echo "wget failed: $WHEEZY_NETBOOT_URL"
        exit 1;
    fi
  fi
  
  cd ${BARCELONA_ROOT}
  echo "md5sum -c artifacts/${1}.md5"
  md5sum -c artifacts/${1}.md5
  cd -
}

prepare_cache_files() {

    #
    # reference: http://www.busybox.net/downloads/binaries/latest/
    #
    BUSYBOX_I686_NAME=busybox-i686
    BUSYBOX_I686_URL="http://www.busybox.net/downloads/binaries/latest/busybox-i686"

    fetch_file_cache $BUSYBOX_I686_NAME $BUSYBOX_I686_URL

    #
    # reference: https://www.kernel.org/pub/linux/utils/kernel/kexec/
    #
    KEXEC_TARBALL_NAME=kexec-tools-2.0.10.tar.gz
    KEXEC_TARBALL_URL="https://www.kernel.org/pub/linux/utils/kernel/kexec/kexec-tools-2.0.10.tar.gz"

    fetch_file_cache $KEXEC_TARBALL_NAME $KEXEC_TARBALL_URL

    #
    # reference: http://ftp.cn.debian.org/debian/dists/wheezy/main/installer-i386/ # be sure to use 20130430 version 
    #
    # http://ftp.debian.org/debian/dists/wheezy/main/installer-i386/20130430/images/netboot/netboot.tar.gz
    # http://ftp.cn.debian.org/debian/dists/wheezy/main/installer-i386/20130430/images/netboot/netboot.tar.gz 
    # 
    WHEEZY_NETBOOT_NAME=netboot.tar.gz
    WHEEZY_NETBOOT_URL="http://ftp.cn.debian.org/debian/dists/wheezy/main/installer-i386/20130430/images/netboot/netboot.tar.gz"

    fetch_file_cache $WHEEZY_NETBOOT_NAME $WHEEZY_NETBOOT_URL

    #
    # reference: http://zfsonlinux.org/generic-deb.html
    #
    SPL_TARBALL_NAME=spl-0.6.4.2.tar.gz
    SPL_TARBALL_URL="http://archive.zfsonlinux.org/downloads/zfsonlinux/spl/spl-0.6.4.2.tar.gz"

    fetch_file_cache $SPL_TARBALL_NAME $SPL_TARBALL_URL

    #
    # reference: http://zfsonlinux.org/generic-deb.html
    #
    ZFS_TARBALL_NAME=zfs-0.6.4.2.tar.gz
    ZFS_TARBALL_URL="http://archive.zfsonlinux.org/downloads/zfsonlinux/zfs/zfs-0.6.4.2.tar.gz"

    fetch_file_cache $ZFS_TARBALL_NAME $ZFS_TARBALL_URL
}

prepare_cache_files

# clean staging dir
rm -rf ${STAGING_DIR}
mkdir -p ${STAGING_DIR}

# clean output dir
rm -rf ${OUTPUT_DIR}
mkdir -p ${OUTPUT_DIR}

build_kexec () {

    highlight "build kexec from source code"

    rm -rf ${STAGING_DIR}/kexec-tools-2.0.10
    
    highlight "untar source tarball"
    tar xzf ${CACHE_DIR}/kexec-tools-2.0.10.tar.gz -C ${STAGING_DIR}
    cd ${STAGING_DIR}/kexec-tools-2.0.10

    # 
    # this is EXTREMELY important to override CC and CXX rather than CFLAGS and CXXFLAGS, 
    # otherwise you get the ld relocatable elf 64bit ... to elf 32bit error 
    #
    # configure --build=i686-pc-linux-gnu "CC=gcc -static -m32" "CXX=g++ -static -m32" "LDFLAGS=-m32"
    #
    highlight "configure kexec source"
    ./configure --build=i686-pc-linux-gnu "CC=gcc -static -m32" "CXX=g++ -static -m32" "LDFLAGS=-m32" &> /dev/null

    highlight "make"
    make &> /dev/null

    highlight "strip"
    strip build/sbin/kexec

    highlight "file"
    file build/sbin/kexec

    highlight "copy to cache folder"
    cp build/sbin/kexec ${CACHE_DIR}

    cd -

    echo "done"
}

if [ -f ${CACHE_DIR}/kexec ]; then
    highlight "kexec executable found in cache folder"
else
    highlight "kexec executable not found in cache folder" 
    build_kexec
fi

install_cefdk_iso () {

    rm -rf ${WORKSPACE}

    # in case previous failure
    rm -rf IntelCE-29.0.12364.325671

    # install five iso
    install_iso IntelCE-BASE-29.0.12364.325671.iso
    install_iso IntelCE-GPL-29.0.12364.325671.iso
    install_iso IntelCE-CEFDK_DEV-29.0.12364.325671.iso
    install_iso IntelCE-MEDIA-29.0.12364.325671.iso
    install_iso IntelCE-XWINDOWS_OPENGL-29.0.12364.325671.iso

    # rename 
    rm -rf workspace
    mv IntelCE-29.0.12364.325671 workspace
}

# this function is used for avoiding untar the whole workspace
# if all we need to re-unpack and patch kernel to start a new kernel build.
#
prepare_kernel () {

    highlight  "unpack kernel"
    make -C ${WORKSPACE} kernel-unpackage &> /dev/null

    highlight "patch emmc bug"
    patch ${KERNEL_DIR}/drivers/mmc/core/mmc.c < ${PATCH_DIR}/002-kernel-mmc-wrong-rev.patch

    highlight "patch usb controller"
    cp ${PATCH_DIR}/pci-quirks.c ${KERNEL_DIR}/drivers/usb/host/pci-quirks.c

    highlight "patch ptrace.h for newer version of gcc"
    patch ${KERNEL_DIR}/arch/x86/include/asm/ptrace.h < ${PATCH_DIR}/008-kernel-ptrace-suppress-newer-version-compiler-complain.patch

    highlight "patch kernel Makefile to build kernel in multithread way (make -j8)"
    patch ${WORKSPACE}/project_build_i686/IntelCE/kernel-29.0.12344.325128/Makefile < \
        ${PATCH_DIR}/006-build-kernel-using-multithread.patch

}

make_kernel () {

    highlight "making kernel, this may take quite a few while, please be patient."
    rm -f ${PKGSRC_DIR}/kernel-29.0.12344.325128/.built
    rm -f ${PKGSRC_DIR}/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/.build
    make -C ${WORKSPACE} kernel &> /dev/null
    echo "done"
}

prepare_workspace () {

    highlight "set targetFS package default to n"
    patch ${WORKSPACE}/package/targetFS/Config.in < ${PATCH_DIR}/000-01-set-targetFS-package-default-n.patch

    # set freetype package default to n, this will result in all graphics-related packages
    # unselected, including but not limited to graphics, display, directFB, freedesktop.
    # this will save about 25 minutes for build time.
    highlight "set freetype package default to n"
    patch ${WORKSPACE}/package/freetype/Config.in < ${PATCH_DIR}/000-02-set-freetype-package-default-n.patch

    highlight "disable ext2root build, error in Ubuntu 12.04, but not 15.04"
    patch ${WORKSPACE}/target/ext2/Config.in < ${PATCH_DIR}/000-03-set-ext2root-default-n.patch

    highlight "disable tarroot build, error in Ubuntu 12.04, but not 15.04"
    patch ${WORKSPACE}/target/tar/Config.in < ${PATCH_DIR}/000-04-set-tarroot-default-n.patch

    highlight "generate (buildroot) global buildroot config"
    make -C ${WORKSPACE} defconfig &> /dev/null

    # unpack bison and patch bug
    highlight "unpack bison"
    make -C ${WORKSPACE} bison-unpackage &> /dev/null
    highlight "patch bison"
    patch ${WORKSPACE}/project_build_i686/IntelCE/bison-29.0.12344.325128/bison-2.4.2/lib/stdio.in.h < ${PATCH_DIR}/001-bison-stdio.in.h-false-warning.patch

    # patch Makefile to use host fakeroot-ng
    highlight "patch buildroot make file to use host fakeroot"
    patch ${WORKSPACE}/Makefile < ${PATCH_DIR}/003-Makefile-use-host-fakeroot-ng.patch

    # unpack busybox
    highlight "unpack busybox"
    make -C ${WORKSPACE} busybox-unpackage &> /dev/null

    highlight "patch busybox to enable pivot_root and switch_root"
    patch ${WORKSPACE}/project_build_i686/IntelCE/busybox-29.0.12344.325128/conf/busybox.config < ${PATCH_DIR}/004-busybox-enable-pivot-root-and-switch-root.patch

    highlight "patch absolute-path bug in busybox-install.tar.gz archive"
    patch ${WORKSPACE}/project_build_i686/IntelCE/busybox-29.0.12344.325128/mk/busybox.mk < \
        ${PATCH_DIR}/005-busybox-fix-absolute-path-inside-busybox-install-tar-gz.patch

    highlight "patch ramdisk makefile"
    patch ${WORKSPACE}/target/ramdisk/ramdisk.mk < ${PATCH_DIR}/100-modified-ramdisk-makefile.patch

    highlight "build toolchain"
    make -C ${WORKSPACE} toolchain &> /dev/null

    highlight "tar toolchain lib files for ramdisk"
    tar -czf ${WORKSPACE}/target/ramdisk/toolchain_install.tar.gz -C ${WORKSPACE}/project_build_i686/IntelCE/root/ .
    tar czf ${STAGING_DIR}/toolchain.lib.tar.gz -C ${WORKSPACE}/project_build_i686/IntelCE/root/ .

    # unpack and patch kernel
    prepare_kernel

    # there is no .config if kernel have never been built
    make_kernel

    highlight "tar prepared kernel for re-building kernel"
    tar czf ${STAGING_DIR}/kernel_snapshot.tar.gz -C ${KERNEL_DIR} .

    highlight "tar workspace"
    tar cfz ${STAGING_DIR}/workspace.tar.gz -C ${WORKSPACE} .
}

build_kbl_initrd_cpio () {

    local FSTATE=${TMP_DIR}/.fstate

    rm -rf ${TMP_DIR}
    
    mkdir -p ${TMP_DIR}/kbl_initrd
    touch $FSTATE

    highlight "copy template files"
    fakeroot -i $FSTATE -s $FSTATE cp -r ${TEMPL_DIR}/kbl_initrd/* ${TMP_DIR}/kbl_initrd

    highlight "copy busybox and kexec"
    fakeroot -i $FSTATE -s $FSTATE cp ${CACHE_DIR}/busybox-i686 ${TMP_DIR}/kbl_initrd/bin/busybox
    fakeroot -i $FSTATE -s $FSTATE cp ${CACHE_DIR}/kexec ${TMP_DIR}/kbl_initrd/bin

    
    # mknod -m 622 console c 5 1
    # mknod -m 622 tty0 c 4 0
    highlight "mknod console & tty0"
    fakeroot -i $FSTATE -s $FSTATE mknod -m 622 ${TMP_DIR}/kbl_initrd/dev/console c 5 1
    fakeroot -i $FSTATE -s $FSTATE mknod -m 622 ${TMP_DIR}/kbl_initrd/dev/tty0 c 4 0

    highlight "pack cpio file"
    cd ${TMP_DIR}/kbl_initrd
    pwd
    fakeroot -i $FSTATE -s $FSTATE sh -c  "find . | cpio -H newc -o > ${STAGING_DIR}/kbl_initrd.cpio"    
    cd -

    echo "done" 
}

#
# build kernel boot loader
#
build_kbl () {

    # sed -i "/CONFIG_INITRAMFS_SOURCE/c\\CONFIG_INITRAMFS_SOURCE=\"${BARCELONA_ROOT}/staging/kbl_initrd.cpio\"" tmp/kbl_kernel_config

    highlight "building kbl..."

    highlight "rm old cpio"
    rm -rf ${STAGING_DIR}/kbl_initrd.cpio

    build_kbl_initrd_cpio

    highlight "apply kbl_kernel_config to current kernel"
    cp ${ARTIFACT_DIR}/kbl_kernel_config ${KERNEL_DIR}/.config

    highlight "set initramfs path to kernel config"
    sed -i "/CONFIG_INITRAMFS_SOURCE/c\\CONFIG_INITRAMFS_SOURCE=\"${STAGING_DIR}/kbl_initrd.cpio\"" ${KERNEL_DIR}/.config

    make_kernel

    cp ${CEFDK_OUTDIR}/bzImage ${OUTPUT_DIR}/kbl
    highlight "kbl is availabe in ${OUTPUT_DIR}/kbl"
}

pack_kernel_source () {
    
    highlight "packing kernel source..."

    highlight "clean kernel source"
    make -C ${KERNEL_DIR} mrproper &> /dev/null

    rm ${KERNEL_DIR}/.build
    rm ${KERNEL_DIR}/.configure
    rm ${KERNEL_DIR}/.install_dev
    rm ${KERNEL_DIR}/.install_target
    rm ${KERNEL_DIR}/linux-2.6.39
    rm ${KERNEL_DIR}/.patch
    rm ${KERNEL_DIR}/.unpacked

    mkdir -p ${USBBOOT_DIR}
    tar czf ${USBBOOT_DIR}/linux-2.6.39.tar.gz -C ${KERNEL_DIR} .

    highlight "kernel source tarball is available in ${USBBOOT_DIR}/linux-2.6.39.tar.gz"
}

build_custom_kernel () {
    
    highlight "remove kernel source"
    rm -rf ${KERNEL_DIR}/*

    # re-prepare kernel
    # prepare_kernel
    # make_kernel
    highlight "restore prepared kernel snapshot"
    tar xzf ${STAGING_DIR}/kernel_snapshot.tar.gz -C ${KERNEL_DIR}

    highlight "apply custom kernel config"
    cp ${ARTIFACT_DIR}/kernel_config ${KERNEL_DIR}/.config

    make_kernel

    mkdir -p ${USBBOOT_DIR}

    # cp bzImage
    cp ${CEFDK_OUTDIR}/bzImage ${USBBOOT_DIR}

    highlight "custom kernel is available at ${USBBOOT_DIR}/bzImage" 
}

#
# this function use fakeroot (persistently)
#
build_netboot_initrd () {

    highlight "build netboot initrd"
    rm -rf ${TMP_DIR}
    mkdir -p ${TMP_DIR}
    touch ${TMP_DIR}/.fstate
    tar xOzf ${CACHE_DIR}/netboot.tar.gz ./debian-installer/i386/initrd.gz | zcat > ${TMP_DIR}/initrd.cpio

    mkdir -p ${TMP_DIR}/initrd
    cd ${TMP_DIR}/initrd
    fakeroot -i ${TMP_DIR}/.fstate -s ${TMP_DIR}/.fstate sh -c "cpio -id < ${TMP_DIR}/initrd.cpio"
    cd -

    # fill preseed.cfg
    highlight "inject preseed.cfg file"
    cp ${ARTIFACT_DIR}/preseed.cfg ${TMP_DIR}/initrd

    # cp modules
    highlight "inject kernel modules"
    mkdir -p ${TMP_DIR}/initrd/lib/modules/2.6.39
    cp -r ${CEFDK_ROOTDIR}/lib/modules/* ${TMP_DIR}/initrd/lib/modules/2.6.39

    # repack
    highlight "repack cpio archive"
    rm -f ${TMP_DIR}/initrd.cpio
    cd ${TMP_DIR}/initrd
    fakeroot -i ${TMP_DIR}/.fstate -s ${TMP_DIR}/.fstate sh -c "find . | cpio -H newc -o > ${TMP_DIR}/initrd.cpio"
    cd -

    highlight "zip initrd"
    cat ${TMP_DIR}/initrd.cpio | gzip -9 > ${OUTPUT_DIR}/usb/boot/ramdisk

    highlight "repackaged netboot initrd is now available at ${OUTPUT_DIR}/usb/boot/ramdisk"
}

install_cefdk_iso
prepare_workspace
build_kbl
pack_kernel_source
build_custom_kernel 
build_netboot_initrd

exit 0

../scripts/banner "Building all targets"

# make all, comment out this line if you want to make manually
make 

#
../scripts/banner "Tar lib modules (.ko)" 
tar -czf binaries/IntelCE/lib_modules.tar.gz -C project_build_i686/IntelCE/root/lib/modules .

../scripts/banner "End"

cd -


