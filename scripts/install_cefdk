#!/bin/bash

set -e

# -rw-r--r-- 1 ma ma  60338176 Aug 24 00:14 IntelCE-BASE-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma   5617664 Aug 24 00:14 IntelCE-CEFDK_DEV-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma  45783040 Aug 24 00:14 IntelCE-GATEWAY-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma 327315456 Aug 24 00:14 IntelCE-GPL-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma 323629056 Aug 24 00:14 IntelCE-MEDIA-29.0.12364.325671.iso
# -rw-r--r-- 1 ma ma  68870144 Aug 24 00:14 IntelCE-XWINDOWS_OPENGL-29.0.12364.325671.iso


# This function use expect to install iso image
function install_iso {

    rm -rf tmp
    mkdir tmp

    echo "mount"

    sudo mount -t iso9660 -o loop disc/$1 tmp

    echo "ls"
    ls tmp

    /usr/bin/expect << EOD

    spawn tmp/installer -d .
    set timeout 1
    expect -exact "--MORE--"
    send "q"
    expect -exact "Do you accept this agreement, yes or no? (y/n/h)"
    send "y"
    expect -exact "Do you accept this agreement, yes or no? (y/n/h)"
    send "y"
    set timeout 30
    expect "Successfully completed installation"

EOD

    sudo umount tmp
    rm -rf tmp
}

if [ -z "$BARCELONA_ROOT" ]; then
    echo "Error: BARCELONA_ROOT is not set"
    exit 1
fi

echo "BARCELONA_ROOT is set to $BARCELONA_ROOT"

WORKSPACE=${BARCELONA_ROOT}/workspace
SCRIPT_DIR=${BARCELONA_ROOT}/scripts
PATCH_DIR=${BARCELONA_ROOT}/patches
OUTPUT_DIR=${BARCELONA_ROOT}/output
ARTIFACT_DIR=${BARCELONA_ROOT}/artifacts
STAGING_DIR=${BARCELONA_ROOT}/staging
CACHE_DIR=${BARCELONA_ROOT}/cache
TMP_DIR=${BARCELONA_ROOT}/tmp

PKGSRC_DIR=${WORKSPACE}/project_build_i686/IntelCE
KERNEL_DIR=${WORKSPACE}/project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/
CEFDK_ROOTDIR=${WORKSPACE}/project_build_i686/IntelCE/root
CEFDK_OUTDIR=${WORKSPACE}/binaries/IntelCE

USBBOOT_DIR=${OUTPUT_DIR}/usb/boot

#
# http://ftp.debian.org/debian/dists/wheezy/main/installer-i386/20130430/images/netboot/netboot.tar.gz
# 
WHEEZY_NETBOOT_URL="http://ftp.debian.org/debian/dists/wheezy/main/installer-i386/20130430/images/netboot/netboot.tar.gz"

# if netboot file is not in cache, download it from internet
mkdir -p ${CACHE_DIR}
if [ ! -e "${CACHE_DIR}/netboot.tar.gz" ]; then
    wget -P ${CACHE_DIR} $WHEEZY_NETBOOT_URL

    if [ ! $? -eq 0 ]; then 
        echo "wget failed: $WHEEZY_NETBOOT_URL"
        exit 1;
    fi
fi

# clean staging dir
rm -rf ${STAGING_DIR}
mkdir -p ${STAGING_DIR}

# clean output dir
rm -rf ${OUTPUT_DIR}
mkdir -p ${OUTPUT_DIR}

scripts/banner "Start installing Intel CEFDK iso images"

# in case previous failure
rm -rf IntelCE-29.0.12364.325671

# install five iso
install_iso IntelCE-BASE-29.0.12364.325671.iso
install_iso IntelCE-GPL-29.0.12364.325671.iso
install_iso IntelCE-CEFDK_DEV-29.0.12364.325671.iso
install_iso IntelCE-MEDIA-29.0.12364.325671.iso
install_iso IntelCE-XWINDOWS_OPENGL-29.0.12364.325671.iso

# rename 
rm -rf workspace
mv IntelCE-29.0.12364.325671 workspace

scripts/banner "Start patching Intel CEFDK"

# change to project's top dir
cd workspace

# set targetFS package default to n
patch package/targetFS/Config.in < ../patches/000-01-set-targetFS-package-default-n.patch

# set freetype package default to n, this will result in all graphics-related packages
# unselected, including but not limited to graphics, display, directFB, freedesktop.
# this will save about 25 minutes for build time.
patch package/freetype/Config.in < ../patches/000-02-set-freetype-package-default-n.patch

# disable ext2root build, error in Ubuntu 12.04, but not 15.04
patch target/ext2/Config.in < ../patches/000-03-set-ext2root-default-n.patch

# disable tarroot build, error in Ubuntu 12.04, but not 15.04
patch target/tar/Config.in < ../patches/000-04-set-tarroot-default-n.patch

# generate (buildroot) global buildroot config
make defconfig

# unpack bison and patch bug
make bison-unpackage
patch project_build_i686/IntelCE/bison-29.0.12344.325128/bison-2.4.2/lib/stdio.in.h < ../patches/001-bison-stdio.in.h-false-warning.patch


# patch Makefile to use host fakeroot-ng
patch Makefile < ../patches/003-Makefile-use-host-fakeroot-ng.patch

# unpack busybox
make busybox-unpackage

# enable pivor_root and switch_root
patch project_build_i686/IntelCE/busybox-29.0.12344.325128/conf/busybox.config < ../patches/004-busybox-enable-pivot-root-and-switch-root.patch

# fix absolute-path bug in busybox-install.tar.gz archive
patch project_build_i686/IntelCE/busybox-29.0.12344.325128/mk/busybox.mk < ../patches/005-busybox-fix-absolute-path-inside-busybox-install-tar-gz.patch

# modified ramdisk makefile
patch target/ramdisk/ramdisk.mk < ../patches/100-modified-ramdisk-makefile.patch

../scripts/banner "Building toolchain"

# build toolchain
make toolchain

../scripts/banner "Tar toolchain lib files for ramdisk"

# tar toolchain target installation (mostly lib file) for ramdisk
tar -czf target/ramdisk/toolchain_install.tar.gz -C project_build_i686/IntelCE/root/ .

../scripts/banner "Building kernel for the first time"

function prepare_kernel {
    # unpack kernel
    make kernel-unpackage

    # patch emmc bug
    patch project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/drivers/mmc/core/mmc.c < ../patches/002-kernel-mmc-wrong-rev.patch

    # patch usb controller
    cp ../patches/pci-quirks.c project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/drivers/usb/host/pci-quirks.c

    # patch ptrace.h for newer version of gcc
    patch ${KERNEL_DIR}/arch/x86/include/asm/ptrace.h < ${PATCH_DIR}/008-kernel-ptrace-suppress-newer-version-compiler-complain.patch

    # build kernel in multithread way (make -j8)
    patch project_build_i686/IntelCE/kernel-29.0.12344.325128/Makefile < ../patches/006-build-kernel-using-multithread.patch
}

function make_kernel {
    rm -f ${PKGSRC_DIR}/kernel-29.0.12344.325128/.built
    rm -f ${PKGSRC_DIR}/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/.build
    make -C ${WORKSPACE} kernel
}

prepare_kernel

#
# there won't be configure file if kernel have not ever been built
#
make_kernel

# (experimental) enable devtmpfs and all raid/md related configuration
# patch project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/.config < ../patches/007-kernel-enable-devtmpfs-and-everything-raid-md.patch


#
#
# step 1: build kbl kernel
#
#

../scripts/banner "Building kbl kernel"

cp ${PATCH_DIR}/kbl_kernel_config ${KERNEL_DIR}/.config

make_kernel

cp ${CEFDK_OUTDIR}/bzImage ${OUTPUT_DIR}/kbl

#
#
# step 2: pack kernel source
#
#

../scripts/banner "Preparing kernel source package"

make -C ${KERNEL_DIR} mrproper

rm ${KERNEL_DIR}/.build
rm ${KERNEL_DIR}/.configure
rm ${KERNEL_DIR}/.install_dev
rm ${KERNEL_DIR}/.install_target
rm ${KERNEL_DIR}/linux-2.6.39
rm ${KERNEL_DIR}/.patch
rm ${KERNEL_DIR}/.unpacked

mkdir -p ${USBBOOT_DIR}
tar cvzf ${USBBOOT_DIR}/linux-2.6.39.tar.gz -C ${KERNEL_DIR} .

#
#
# step 3: clean kernel package folder, redo 
#
#

rm -rf ${PKGSRC_DIR}/kernel-29.0.12344.325128

../scripts/banner "Building kernel again"

prepare_kernel

make_kernel

cp ../patches/kernel_config project_build_i686/IntelCE/kernel-29.0.12344.325128/kernel_source/linux-2.6.39/.config

../scripts/banner "Building kernel again and again"

make_kernel

#
# here we have the bzImage, vmlinuz, and kernel modules for usb drive installer
#
mkdir -p ${USBBOOT_DIR}

# cp bzImage
cp ${CEFDK_OUTDIR}/bzImage ${USBBOOT_DIR}

# rebuild netboot initrd
fakeroot ${SCRIPT_DIR}/build_netboot_initrd

exit 0


../scripts/banner "Building all targets"

# make all, comment out this line if you want to make manually
make 

#
../scripts/banner "Tar lib modules (.ko)" 
tar -czf binaries/IntelCE/lib_modules.tar.gz -C project_build_i686/IntelCE/root/lib/modules .

../scripts/banner "End"

cd -


