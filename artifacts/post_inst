#!/bin/sh

set -e

DASH="------------------------------"

#
# echo $1 in green color
#
highlight () {

    echo -e "\e[32m\e[1m${1}\e[0m"
}

banner () {
    echo ""
    highlight $DASH
    highlight "$1"
    highlight $DASH
}

highlight $DASH
highlight "post_inst"
highlight $DASH
# pwd
# echo ""

#
# paths
#
USB_ROOTDIR=/media/usb
BOOT_DIR=/media/usb/boot
TMP_DIR=/media/usb/tmp

KERNEL_APP=
KERNEL_REV=

highlight "mount usb at /target/media/usb0"
mount -t ext4 /dev/sda1 /target/media/usb0

highlight "extract append-to-version and revision for make-kpkg"
KERNEL_APP="$(cat /target/media/usb0/boot/ker-app)"
KERNEL_REV="$(cat /target/media/usb0/boot/ker-rev)"

echo "append-to-version=${KERNEL_APP}"
echo "revision=${KERNEL_REV}"

KER_IMG_DEB="linux-image-2.6.39.${KERNEL_APP}_${KERNEL_REV}_i386.deb"
KER_HDR_DEB="linux-headers-2.6.39.${KERNEL_APP}_${KERNEL_REV}_i386.deb"

SKIP_BUILD=

if [ -f "/target/media/usb0/build/${KER_IMG_DEB}" ] && [ -f "/target/media/usb0/build/${KER_HDR_DEB}" ]
then
    highlight "linux image and headers debian packages are found in build dir."
    echo "and their version matches version stored in file. skip building these packages."
    echo "spl and zfs package building are also skipped."
    echo "if you are not sure if this is acceptable, delete the build folder on usb driver and retry."

    SKIP_BUILD="yes"
else
    highlight "no previous build found, prepare to build debian packages."
    mkdir -p /target/media/usb0/build/linux
fi

highlight "source chroot-setup.sh script"
. /lib/chroot-setup.sh

highlight "chroot_setup"
chroot_setup

highlight "install packages required for building spl and zfs"
chroot /target apt-get -y install build-essential gawk alien fakeroot
chroot /target apt-get -y install zlib1g-dev uuid-dev libblkid-dev libselinux-dev parted lsscsi wget

highlight "install package required for building kernel and initramfs"
chroot /target apt-get -y install kernel-package initramfs-tools

if [ "$SKIP_BUILD" != "yes" ]; then

    highlight "untar kernel source into /target/media/usb0/build/linux"
    tar xzf /target/media/usb0/boot/linux-2.6.39.tar.gz -C /target/media/usb0/build/linux

    highlight "copy kernel_config"
    cp /target/media/usb0/boot/kernel_config /target/media/usb0/build/linux/.config

    highlight "build kernel image and headers (deb)"
    chroot /target /bin/bash -c "cd /media/usb0/build/linux; make-kpkg --initrd --jobs=4 --append-to-version=.${KERNEL_APP} --revision=${KERNEL_REV} kernel_image kernel_headers"
fi

highlight "install kernel image deb"
chroot /target /bin/bash -c "dpkg -i /media/usb0/build/linux-image-*.deb"

highlight "install kernel headers deb"
chroot /target /bin/bash -c "dpkg -i /media/usb0/build/linux-headers-*.deb"


if [ "$SKIP_BUILD" != "yes" ]; then

    #
    # busybox tar complains, use target one
    #
    highlight "untar spl tarball"
    chroot /target /bin/bash -c "tar xzf /media/usb0/boot/spl-0.6.4.2.tar.gz -C /media/usb0/build"

    highlight "configure and make spl"
    chroot /target /bin/bash -c "cd /media/usb0/build/spl-0.6.4.2; pwd; ./configure; make deb-utils deb-kmod"

fi

highlight "install spl packages"
chroot /target /bin/bash -c "dpkg -i /media/usb0/build/spl-0.6.4.2/*.deb"

if [ "$SKIP_BUILD" != "yes" ]; then

    highlight "untar zfs tarball"
    chroot /target /bin/bash -c "tar xzf /media/usb/boot/zfs-0.6.4.2.tar.gz -C /media/usb0/build"

    highlight "configure, make, and install zfs"
    chroot /target /bin/bash -c "cd /media/usb0/build/zfs-0.6.4.2; pwd; ./configure; make deb-utils deb-kmod"

highlight "install zfs packages"
chroot /target /bin/bash -c "dpkg -i /media/usb0/build/zfs-0.6.4.2/*.deb"

highlight "calling hook function"
chroot /target /media/usb0/boot/post_inst_hook

# unneccessary
# highlight "update initramfs"
# chroot /target update-initramfs -c -k ${KERNEL_NAME}
# ls /target/boot

highlight "build boot file link and create cmdline"
cd /target/boot
ln -s $(find . -name vmlinuz*) bzImage
ln -s $(find . -name initrd.img*) ramdisk
cd /
echo "console=tty0 console=ttyS0,115200 root=/dev/mmcblk0p1 rw rootwait init=/sbin/init HWID=5" > /target/boot/cmdline

highlight "chroot_cleanup"
chroot_cleanup
echo "done"

highlight "unmount usb drive on target"
umount /target/media/usb0
echo "done"

highlight $DASH
highlight "post_inst script finished. exit shell and finish installation."
highlight $DASH








